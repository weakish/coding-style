{
    "parser": "babel-eslint",
    "extends": [
        "eslint:recommended",
        "plugin:flowtype/recommended"
    ],
    "plugins": [
        "flowtype"
    ],
    "rules": {
        // Overite eslint:recommended
        //
        // Never assume users will not press `F12`.
        "no-console": "off",
        // ES6 brings in block level function declaration.
        "no-inner-declarations": "off",
        //
        // Customization
        //
        // Enfores curly braces after `if` statements etc.
        "curly": ["error", "all"],
        // Enfores `===` and `!==`.
        "eqeqeq": "error",
        // Since we have the above `eqeqeq` rule, we do not need yoda experssion,
        // which reduces readability.
        // However, `0 < x && x < 1` is actually more readable.
        "yoda": ["error", "never", { "exceptRange": true }],
        // Test `{}.hasOwnProperty.call(obj, key)`
        // to prevent including properties that are inherited through the prototype chain.
        "guard-for-in": "error",
        // Lexical declaration is visible in the entire switch block
        // but it only gets initialized when the case where it is defined is reached.
        "no-case-declarations": "error",
        // Use `bind()` when there is actualy `this` in function body.
        "no-extra-bind": "error",
        // Always use `0.6` instead of `.6`.
        "no-floating-decimal": "error",
        // Avoid modifying built-in global variables.
        "no-global-assign": "error",
        // Things like `"" + 1` is too  clear to me.
        "no-implicit-coercion": "error",
        // `setTimeout()` and `setInterval()` can accept a string of JavaScript code as their first argument.
        "no-implied-eval": "error",
        // Yet another `eval` like.
        "no-script-url": "error",
        // This SpiderMonkey extension is obsolete.
        // Use ES6's iterator and generator instead.
        "no-iterator": "error",
        // For typos.
        "no-multi-spaces": "error",
        // `new Boolean(...)`, `new Number(...)`, and `new String(...)` are rarely used.
        // And it is confusing that `new Boolean(false)` resolves to `true`.
        "no-new-wrappers": "error",
        // Similarly, no `new Symbol(...)`.
        "no-new-symbol": "error",
        // Disallow using `new C();` for side effects only.
        "no-new": "error",
        // Deprecated in ES5.
        "no-octal-escape": "error",
        // Swift forbids this.
        "no-param-reassign": "error",
        // `__proto__` is deprecated in ES3.1. Use `getPrototypeOf` instead.
        "no-proto": "error",
        // To avoid typos, similar to `if (a = b)`.
        "no-return-assign": "error",
        // `return await` is useless in `async` functions.
        "no-return-await": "error",
        // Most likely a typo.
        "no-self-compare": "error",
        // Comma operator frequently obscures side effects, and is often an accident.
        "no-sequences": "error",
        // Throw `Error` objects, not strings.
        "no-throw-literal": "error",
        // Probably a mistake.
        "no-unmodified-loop-condition": "error",
        // IDEs will probably warn against this.
        "no-unused-expressions": "error",
        // Flag usage of Function.prototype.call() and Function.prototype.apply()
        // that can be replaced with the normal function invocation,
        // to speed up programs.
        "no-useless-call": "error",
        // Disallow unnecessary concatenation of strings.
        "no-useless-concat": "error",
        // Escaping non-special characters in strings, template literals, and regular expressions doesn’t have any effect.
        "no-useless-escape": "error",
        // Disallow use of the void operator.
        // `void expression` evaluate `expression` and return `undefined`.
        // Common usage cases of `void`:
        // - Workaround of `undefined` variable is mutable piror to ES5. Now ES5 is widely supported.
        // - Because of `void 0` shorter than `undefined`. If this did matter, this is the job of a minifier.
        // - In IIFE(immediately-invoked function expression), `void function(){ foo = 1; }()`
        //   forces the function to be treated as expression instead of declaration.
        //   We prefer `(function(){ foo = 1; }())`, which is cleaner.
        "no-void": "error",
        // To prevent typos.
        "wrap-iife": "error",
        // Disallow `async` functions which have no `await` expression.
        "require-await": "error",
        // While ES5 disallows overriting `undefined`, it is still possible to shadow `undefined`.
        // Thus we forbid the use of `undefined`:
        // - Variables that should be `undefined` are simply left uninitialized.
        // - Checking if a value is `undefined` should be done with `typeof`.
        "no-undefined": "error",
        // Use `path.join` since it works across OSes with different path seperators.
        "no-path-concat": "error",
        // Prevent forgetting to handle the first `error` argument.
        "handle-callback-err": ["error", "^(err|error|\\w+Error)$"],
        // It’s unnecessary to use computed properties with literals.
        "no-useless-computed-key": "error",
        // ES2015 provides a default class constructor if one is not specified.
        // As such, it is unnecessary to provide an empty constructor or one that simply delegates into its parent class.
        "no-useless-constructor": "error",
        // Disallow renaming import, export, and destructured assignments to the same name.
        "no-useless-rename": "error",
        // Forbid `var`. Use block scoped `let` and `const` instead.
        "no-var": "error",
        // If a variable is never reassigned, suggest `const`.
        "prefer-const": "error",
        // Prefer the rest parameter in ES2015, instead of `arguments`, which does not have methods of `Array.prototype`.
        "prefer-rest-params": "error",
        // Disallow generator functions that do not have `yield` to avoid typos.
        "require-yield": "error",
        // Prefer arrow functions as callbacks since `this` in them bind to the upper scope's.
        "prefer-arrow-callback": "error",
        // "use strict"
        "strict": ["error", "global"]
    }
}
